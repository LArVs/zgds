<?php return array (
  'unique_key' => 'category',
  'preserve_keys' => false,
  'update_object' => true,
  'related_objects' => 
  array (
    'Chunks' => 
    array (
      '4d5e5aa93f76bac323f66706d746d9bf' => 
      array (
        'preserve_keys' => false,
        'update_object' => true,
        'unique_key' => 'name',
        'class' => 'modChunk',
        'object' => '{"id":1,"source":0,"property_preprocess":0,"name":"BreadCrumbContainerTpl","description":"Container template for BreadCrumb","editor_type":0,"category":0,"cache_type":0,"snippet":"<ul id=\\"breadcrumb\\" itemprop=\\"breadcrumb\\">\\r\\n\\t<li><a href=\\"[[++site_url]]\\">[[++site_name]]<\\/a><\\/li>\\r\\n\\t[[+crumbs]]\\r\\n<\\/ul>","locked":0,"properties":"","static":0,"static_file":"","content":"<ul id=\\"breadcrumb\\" itemprop=\\"breadcrumb\\">\\r\\n\\t<li><a href=\\"[[++site_url]]\\">[[++site_name]]<\\/a><\\/li>\\r\\n\\t[[+crumbs]]\\r\\n<\\/ul>"}',
        'guid' => '830cd015f398d80a099ce451022c0d22',
        'native_key' => 1,
        'signature' => '2a57c791de9b9939459b3aad0f4435a1',
      ),
      '0fa37f63aff34a826ab22adf9456377a' => 
      array (
        'preserve_keys' => false,
        'update_object' => true,
        'unique_key' => 'name',
        'class' => 'modChunk',
        'object' => '{"id":2,"source":0,"property_preprocess":0,"name":"BreadCrumbCurrentCrumbTpl","description":"Current crumb template for BreadCrumb","editor_type":0,"category":0,"cache_type":0,"snippet":"<li>[[+pagetitle]]<\\/li>","locked":0,"properties":"","static":0,"static_file":"","content":"<li>[[+pagetitle]]<\\/li>"}',
        'guid' => '8567bea0489c448cd11a6c683b17a6dc',
        'native_key' => 2,
        'signature' => '38e4482714663568aad5417e6c1d1bdb',
      ),
      '4b61eae2a2dc6da994237b3a0745ea10' => 
      array (
        'preserve_keys' => false,
        'update_object' => true,
        'unique_key' => 'name',
        'class' => 'modChunk',
        'object' => '{"id":3,"source":0,"property_preprocess":0,"name":"BreadCrumbLinkCrumbTpl","description":"Default crumb template for BreadCrumb","editor_type":0,"category":0,"cache_type":0,"snippet":"<li><a href=\\"[[+link]]\\">[[+pagetitle]]<\\/a><\\/li>","locked":0,"properties":"","static":0,"static_file":"","content":"<li><a href=\\"[[+link]]\\">[[+pagetitle]]<\\/a><\\/li>"}',
        'guid' => 'e027c1e95b5f76f9f851ffa27394eebb',
        'native_key' => 3,
        'signature' => 'efeb490f41e1dc28dbfc9c138c8e0b2e',
      ),
      '4d7b25b4378ed6a0f7b17656262c9973' => 
      array (
        'preserve_keys' => false,
        'update_object' => true,
        'unique_key' => 'name',
        'class' => 'modChunk',
        'object' => '{"id":4,"source":0,"property_preprocess":0,"name":"BreadCrumbMaxCrumbTpl","description":"Max delimiter crumb template for BreadCrumb","editor_type":0,"category":0,"cache_type":0,"snippet":"<li>...<\\/li>","locked":0,"properties":"","static":0,"static_file":"","content":"<li>...<\\/li>"}',
        'guid' => 'd2bb84c32785a99bf5da5f7c5c9f82ec',
        'native_key' => 4,
        'signature' => 'd614e3655729e29f9aea32f6eb717dd0',
      ),
    ),
    'Snippets' => 
    array (
      '36b01edaf0632faa8b4800b0fb0fe143' => 
      array (
        'preserve_keys' => false,
        'update_object' => true,
        'unique_key' => 'name',
        'class' => 'modSnippet',
        'object' => '{"id":1,"source":0,"property_preprocess":0,"name":"BreadCrumb","description":"This snippet will create a breadcrumb navigation for the current resource or a specific resource.","editor_type":0,"category":0,"cache_type":0,"snippet":"\\/**\\r\\n * BreadCrumb\\r\\n * Copyright 2011 Benjamin Vauchel <contact@omycode.fr>\\r\\n *\\r\\n * BreadCrumb is free software; you can redistribute it and\\/or modify it\\r\\n * under the terms of the GNU General Public License as published by the Free\\r\\n * Software Foundation; either version 2 of the License, or (at your option) any\\r\\n * later version.\\r\\n *\\r\\n * BreadCrumb is distributed in the hope that it will be useful, but WITHOUT ANY\\r\\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR\\r\\n * A PARTICULAR PURPOSE. See the GNU General Public License for more details.\\r\\n *\\r\\n * You should have received a copy of the GNU General Public License along with\\r\\n * BreadCrumb; if not, write to the Free Software Foundation, Inc., 59 Temple Place,\\r\\n * Suite 330, Boston, MA 02111-1307 USA\\r\\n *\\r\\n * @package breadcrumb\\r\\n * @author Benjamin Vauchel <contact@omycode.fr>\\r\\n *\\r\\n * @version Version 1.1.0 pl\\r\\n * 23\\/04\\/12\\r\\n *\\r\\n * Breadcrumb is a snippet for MODx Revolution, inspired by the Jared\'s BreadCrumbs snippet.\\r\\n * It will create a breadcrumb navigation for the current resource or a specific resource.\\r\\n *\\r\\n * Optional properties:\\r\\n *\\r\\n * @property resourceId - (int) Resource ID whose breadcrumb is created; [Default value : current resource id].\\r\\n * @property maxCrumbs - (int) Max crumbs shown in breadcrumb. Max delimiter template can be customize with property maxCrumbTpl ; [Default value : 100].\\r\\n * @property showHidden - (bool) Show hidden resources in breadcrumb; [Default value : true].\\r\\n * @property showContainer - (bool) Show container resources in breadcrumb; [Default value : true].\\r\\n * @property showUnPub - (bool) Show unpublished resources in breadcrumb; [Default value : true].\\r\\n * @property showCurrentCrumb - (bool) Show current resource as a crumb; [Default value : true].\\r\\n * @property showBreadCrumbAtHome - (bool) Show BreadCrumb on the home page; [Default value : true].\\r\\n * @property showHomeCrumb - (bool) Show the home page as a crumb; [Default value : false].\\r\\n * @property useWebLinkUrl - (bool) Use the weblink url instead of the url to the weblink; [Default value : true].\\r\\n * @property direction - (string) Direction or breadcrumb : Left To Right (ltr) or Right To Left (rtl) for Arabic language for example; [Default value : ltr].\\r\\n *\\r\\n * Templates :\\r\\n *\\r\\n * @property containerTpl - (string) Container template for BreadCrumb; [Default value : BreadCrumbContainerTpl].\\r\\n * @property currentCrumbTpl - (string) Current crumb template for BreadCrumb; [Default value : BreadCrumbCurrentCrumbTpl].\\r\\n * @property linkCrumbTpl - (string) Default crumb template for BreadCrumb; [Default value : BreadCrumbLinkCrumbTpl].\\r\\n * @property maxCrumbTpl - (string) Max delimiter crumb template for BreadCrumb; [Default value : BreadCrumbMaxCrumbTpl].\\r\\n *\\/\\r\\n\\r\\n\\/\\/ Script Properties\\r\\n$resourceId           = !empty($resourceId) ? $resourceId : null;\\r\\n$from                 = !empty($from) ? $from : 0;\\r\\n$to                   = $currentResourceId = (!is_null($resourceId) ? $resourceId : (!empty($to) ? $to : $modx->resource->get(\'id\')));\\r\\n$maxCrumbs            = !empty($maxCrumbs) ? abs(intval($maxCrumbs)) : 100;\\r\\n$showHidden           = isset($showHidden) ? (bool)$showHidden : true;\\r\\n$showContainer        = isset($showContainer) ? (bool)$showContainer : true;\\r\\n$showUnPub            = isset($showUnPub) ? (bool)$showUnPub : true;\\r\\n$showCurrentCrumb     = isset($showCurrentCrumb) ? (bool)$showCurrentCrumb : true;\\r\\n$showBreadCrumbAtHome = isset($showBreadCrumbAtHome) ? (bool)$showBreadCrumbAtHome : true;\\r\\n$showHomeCrumb        = isset($showHomeCrumb) ? (bool)$showHomeCrumb : false;\\r\\n$useWebLinkUrl        = isset($useWebLinkUrl) ? (bool)$useWebLinkUrl : true;\\r\\n$direction            = !empty($direction) && $direction == \'rtl\' ? \'rtl\' : \'ltr\';\\r\\n$containerTpl         = !empty($containerTpl) ? $containerTpl : \'BreadCrumbContainerTpl\';\\r\\n$currentCrumbTpl      = !empty($currentCrumbTpl) ? $currentCrumbTpl : \'BreadCrumbCurrentCrumbTpl\';\\r\\n$linkCrumbTpl         = !empty($linkCrumbTpl) ? $linkCrumbTpl : \'BreadCrumbLinkCrumbTpl\';\\r\\n$maxCrumbTpl          = !empty($maxCrumbTpl) ? $maxCrumbTpl : \'BreadCrumbMaxCrumbTpl\';\\r\\n\\r\\n\\/\\/ Output variable\\r\\n$output = \'\';\\r\\n\\r\\n\\/\\/ We check if current resource is the homepage and if breadcrumb is shown for the homepage\\r\\nif(!$showBreadCrumbAtHome && $modx->resource->get(\'id\') == $modx->getOption(\'site_start\'))\\r\\n{\\r\\n\\treturn \'\';\\r\\n}\\r\\n\\r\\n\\/\\/ We get all the crumbs\\r\\n$crumbs = array();\\r\\n$crumbsCount = 0;\\r\\n$resourceId = $to;\\r\\nwhile($resourceId != $from && $crumbsCount < $maxCrumbs)\\r\\n{\\r\\n\\t$resource = $modx->getObject(\'modResource\', $resourceId);\\r\\n\\t\\r\\n\\t\\/\\/ We check the conditions to show crumb\\r\\n\\tif(\\r\\n\\t\\t(($resourceId == $modx->getOption(\'site_start\') && $showHomeCrumb) || $resourceId != $modx->getOption(\'site_start\'))  \\/\\/ ShowHomeCrumb\\r\\n\\t\\t&& (($resource->get(\'hidemenu\') && $showHidden) || !$resource->get(\'hidemenu\'))\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\/\\/ ShowHidden\\r\\n\\t\\t&& (($resource->get(\'isfolder\') && $showContainer) || !$resource->get(\'isfolder\'))\\t\\t\\t\\t\\t\\t\\t\\t\\t\\/\\/ ShowContainer\\r\\n\\t\\t&& ((!$resource->get(\'published\') && $showUnPub) || $resource->get(\'published\')) \\t\\t\\t\\t\\t\\t\\t\\t\\t\\/\\/ UnPub\\r\\n\\t\\t&& (($resourceId == $currentResourceId && $showCurrentCrumb) || $resourceId != $currentResourceId)  \\/\\/ ShowCurrent\\r\\n\\t)\\r\\n\\t{\\r\\n\\t\\t\\/\\/ If is LTR direction, we push resource at the beginning of the array \\r\\n\\t\\tif($direction == \'ltr\')\\r\\n\\t\\t{\\r\\n\\t\\t    array_unshift($crumbs, $resource); \\r\\n\\t\\t}\\r\\n\\t\\t\\/\\/ Else we push it at the end\\r\\n\\t\\telse\\r\\n\\t\\t{\\r\\n\\t\\t    $crumbs[] = $resource;\\r\\n\\t\\t}\\r\\n\\t\\t\\r\\n\\t\\t$crumbsCount++;\\r\\n\\t}\\r\\n\\t$resourceId = $resource->get(\'parent\');\\r\\n}\\r\\n\\r\\n\\/\\/ We build the output of crumbs\\r\\nforeach($crumbs as $key => $resource)\\r\\n{\\t\\r\\n\\t\\/\\/ Current crumb tpl ?\\r\\n\\tif($showCurrentCrumb && ($resource->get(\'id\') == $currentResourceId))\\r\\n\\t{\\r\\n\\t\\t$tpl = $currentCrumbTpl;\\r\\n\\t}\\r\\n\\t\\/\\/ or default crumb tpl ?\\r\\n\\telse\\r\\n\\t{\\r\\n\\t\\t$tpl = $linkCrumbTpl;\\r\\n\\t}\\r\\n\\t\\r\\n\\t\\/\\/ Placeholders\\r\\n\\t$placeholders = $resource->toArray();\\r\\n\\tif($resource->get(\'class_key\') == \'modWebLink\' && $useWebLinkUrl)\\r\\n\\t{\\r\\n\\t\\tif(is_numeric($resource->get(\'content\')))\\r\\n\\t\\t{\\r\\n\\t\\t\\t$link = $modx->makeUrl($resource->get(\'content\'));\\r\\n\\t\\t} \\r\\n\\t\\telse \\r\\n\\t\\t{\\r\\n\\t\\t\\t$link = $resource->get(\'content\');\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\telse\\r\\n\\t{\\r\\n\\t\\t$link = $modx->makeUrl($resource->get(\'id\'));\\r\\n\\t}\\r\\n\\t$placeholders = array_merge($resource->toArray(), array(\'link\' => $link));\\r\\n\\t\\r\\n\\t\\/\\/ Output\\r\\n\\t$output .= $modx->getChunk($tpl, $placeholders);\\r\\n}\\r\\n\\r\\n\\/\\/ We add the max delimiter to the crumbs output, if the max limit was reached\\r\\nif($crumbsCount == $maxCrumbs)\\r\\n{\\r\\n\\t\\/\\/ If is LTR direction, we push the max delimiter at the beginning of the crumbs\\r\\n\\tif($direction == \'ltr\')\\r\\n\\t{\\r\\n\\t\\t$output = $modx->getChunk($maxCrumbTpl).$output;\\r\\n\\t}\\r\\n\\t\\/\\/ Else we push it at the end\\r\\n\\telse\\r\\n\\t{\\r\\n\\t\\t$output .= $modx->getChunk($maxCrumbTpl);\\r\\n\\t}\\r\\n}\\r\\n\\r\\n\\/\\/ We build the breadcrumb output\\r\\n$output = $modx->getChunk($containerTpl, array(\\r\\n\\t\'crumbs\' => $output,\\r\\n));\\r\\n\\r\\nreturn $output;","locked":0,"properties":null,"moduleguid":"","static":0,"static_file":"","content":"\\/**\\r\\n * BreadCrumb\\r\\n * Copyright 2011 Benjamin Vauchel <contact@omycode.fr>\\r\\n *\\r\\n * BreadCrumb is free software; you can redistribute it and\\/or modify it\\r\\n * under the terms of the GNU General Public License as published by the Free\\r\\n * Software Foundation; either version 2 of the License, or (at your option) any\\r\\n * later version.\\r\\n *\\r\\n * BreadCrumb is distributed in the hope that it will be useful, but WITHOUT ANY\\r\\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR\\r\\n * A PARTICULAR PURPOSE. See the GNU General Public License for more details.\\r\\n *\\r\\n * You should have received a copy of the GNU General Public License along with\\r\\n * BreadCrumb; if not, write to the Free Software Foundation, Inc., 59 Temple Place,\\r\\n * Suite 330, Boston, MA 02111-1307 USA\\r\\n *\\r\\n * @package breadcrumb\\r\\n * @author Benjamin Vauchel <contact@omycode.fr>\\r\\n *\\r\\n * @version Version 1.1.0 pl\\r\\n * 23\\/04\\/12\\r\\n *\\r\\n * Breadcrumb is a snippet for MODx Revolution, inspired by the Jared\'s BreadCrumbs snippet.\\r\\n * It will create a breadcrumb navigation for the current resource or a specific resource.\\r\\n *\\r\\n * Optional properties:\\r\\n *\\r\\n * @property resourceId - (int) Resource ID whose breadcrumb is created; [Default value : current resource id].\\r\\n * @property maxCrumbs - (int) Max crumbs shown in breadcrumb. Max delimiter template can be customize with property maxCrumbTpl ; [Default value : 100].\\r\\n * @property showHidden - (bool) Show hidden resources in breadcrumb; [Default value : true].\\r\\n * @property showContainer - (bool) Show container resources in breadcrumb; [Default value : true].\\r\\n * @property showUnPub - (bool) Show unpublished resources in breadcrumb; [Default value : true].\\r\\n * @property showCurrentCrumb - (bool) Show current resource as a crumb; [Default value : true].\\r\\n * @property showBreadCrumbAtHome - (bool) Show BreadCrumb on the home page; [Default value : true].\\r\\n * @property showHomeCrumb - (bool) Show the home page as a crumb; [Default value : false].\\r\\n * @property useWebLinkUrl - (bool) Use the weblink url instead of the url to the weblink; [Default value : true].\\r\\n * @property direction - (string) Direction or breadcrumb : Left To Right (ltr) or Right To Left (rtl) for Arabic language for example; [Default value : ltr].\\r\\n *\\r\\n * Templates :\\r\\n *\\r\\n * @property containerTpl - (string) Container template for BreadCrumb; [Default value : BreadCrumbContainerTpl].\\r\\n * @property currentCrumbTpl - (string) Current crumb template for BreadCrumb; [Default value : BreadCrumbCurrentCrumbTpl].\\r\\n * @property linkCrumbTpl - (string) Default crumb template for BreadCrumb; [Default value : BreadCrumbLinkCrumbTpl].\\r\\n * @property maxCrumbTpl - (string) Max delimiter crumb template for BreadCrumb; [Default value : BreadCrumbMaxCrumbTpl].\\r\\n *\\/\\r\\n\\r\\n\\/\\/ Script Properties\\r\\n$resourceId           = !empty($resourceId) ? $resourceId : null;\\r\\n$from                 = !empty($from) ? $from : 0;\\r\\n$to                   = $currentResourceId = (!is_null($resourceId) ? $resourceId : (!empty($to) ? $to : $modx->resource->get(\'id\')));\\r\\n$maxCrumbs            = !empty($maxCrumbs) ? abs(intval($maxCrumbs)) : 100;\\r\\n$showHidden           = isset($showHidden) ? (bool)$showHidden : true;\\r\\n$showContainer        = isset($showContainer) ? (bool)$showContainer : true;\\r\\n$showUnPub            = isset($showUnPub) ? (bool)$showUnPub : true;\\r\\n$showCurrentCrumb     = isset($showCurrentCrumb) ? (bool)$showCurrentCrumb : true;\\r\\n$showBreadCrumbAtHome = isset($showBreadCrumbAtHome) ? (bool)$showBreadCrumbAtHome : true;\\r\\n$showHomeCrumb        = isset($showHomeCrumb) ? (bool)$showHomeCrumb : false;\\r\\n$useWebLinkUrl        = isset($useWebLinkUrl) ? (bool)$useWebLinkUrl : true;\\r\\n$direction            = !empty($direction) && $direction == \'rtl\' ? \'rtl\' : \'ltr\';\\r\\n$containerTpl         = !empty($containerTpl) ? $containerTpl : \'BreadCrumbContainerTpl\';\\r\\n$currentCrumbTpl      = !empty($currentCrumbTpl) ? $currentCrumbTpl : \'BreadCrumbCurrentCrumbTpl\';\\r\\n$linkCrumbTpl         = !empty($linkCrumbTpl) ? $linkCrumbTpl : \'BreadCrumbLinkCrumbTpl\';\\r\\n$maxCrumbTpl          = !empty($maxCrumbTpl) ? $maxCrumbTpl : \'BreadCrumbMaxCrumbTpl\';\\r\\n\\r\\n\\/\\/ Output variable\\r\\n$output = \'\';\\r\\n\\r\\n\\/\\/ We check if current resource is the homepage and if breadcrumb is shown for the homepage\\r\\nif(!$showBreadCrumbAtHome && $modx->resource->get(\'id\') == $modx->getOption(\'site_start\'))\\r\\n{\\r\\n\\treturn \'\';\\r\\n}\\r\\n\\r\\n\\/\\/ We get all the crumbs\\r\\n$crumbs = array();\\r\\n$crumbsCount = 0;\\r\\n$resourceId = $to;\\r\\nwhile($resourceId != $from && $crumbsCount < $maxCrumbs)\\r\\n{\\r\\n\\t$resource = $modx->getObject(\'modResource\', $resourceId);\\r\\n\\t\\r\\n\\t\\/\\/ We check the conditions to show crumb\\r\\n\\tif(\\r\\n\\t\\t(($resourceId == $modx->getOption(\'site_start\') && $showHomeCrumb) || $resourceId != $modx->getOption(\'site_start\'))  \\/\\/ ShowHomeCrumb\\r\\n\\t\\t&& (($resource->get(\'hidemenu\') && $showHidden) || !$resource->get(\'hidemenu\'))\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\/\\/ ShowHidden\\r\\n\\t\\t&& (($resource->get(\'isfolder\') && $showContainer) || !$resource->get(\'isfolder\'))\\t\\t\\t\\t\\t\\t\\t\\t\\t\\/\\/ ShowContainer\\r\\n\\t\\t&& ((!$resource->get(\'published\') && $showUnPub) || $resource->get(\'published\')) \\t\\t\\t\\t\\t\\t\\t\\t\\t\\/\\/ UnPub\\r\\n\\t\\t&& (($resourceId == $currentResourceId && $showCurrentCrumb) || $resourceId != $currentResourceId)  \\/\\/ ShowCurrent\\r\\n\\t)\\r\\n\\t{\\r\\n\\t\\t\\/\\/ If is LTR direction, we push resource at the beginning of the array \\r\\n\\t\\tif($direction == \'ltr\')\\r\\n\\t\\t{\\r\\n\\t\\t    array_unshift($crumbs, $resource); \\r\\n\\t\\t}\\r\\n\\t\\t\\/\\/ Else we push it at the end\\r\\n\\t\\telse\\r\\n\\t\\t{\\r\\n\\t\\t    $crumbs[] = $resource;\\r\\n\\t\\t}\\r\\n\\t\\t\\r\\n\\t\\t$crumbsCount++;\\r\\n\\t}\\r\\n\\t$resourceId = $resource->get(\'parent\');\\r\\n}\\r\\n\\r\\n\\/\\/ We build the output of crumbs\\r\\nforeach($crumbs as $key => $resource)\\r\\n{\\t\\r\\n\\t\\/\\/ Current crumb tpl ?\\r\\n\\tif($showCurrentCrumb && ($resource->get(\'id\') == $currentResourceId))\\r\\n\\t{\\r\\n\\t\\t$tpl = $currentCrumbTpl;\\r\\n\\t}\\r\\n\\t\\/\\/ or default crumb tpl ?\\r\\n\\telse\\r\\n\\t{\\r\\n\\t\\t$tpl = $linkCrumbTpl;\\r\\n\\t}\\r\\n\\t\\r\\n\\t\\/\\/ Placeholders\\r\\n\\t$placeholders = $resource->toArray();\\r\\n\\tif($resource->get(\'class_key\') == \'modWebLink\' && $useWebLinkUrl)\\r\\n\\t{\\r\\n\\t\\tif(is_numeric($resource->get(\'content\')))\\r\\n\\t\\t{\\r\\n\\t\\t\\t$link = $modx->makeUrl($resource->get(\'content\'));\\r\\n\\t\\t} \\r\\n\\t\\telse \\r\\n\\t\\t{\\r\\n\\t\\t\\t$link = $resource->get(\'content\');\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\telse\\r\\n\\t{\\r\\n\\t\\t$link = $modx->makeUrl($resource->get(\'id\'));\\r\\n\\t}\\r\\n\\t$placeholders = array_merge($resource->toArray(), array(\'link\' => $link));\\r\\n\\t\\r\\n\\t\\/\\/ Output\\r\\n\\t$output .= $modx->getChunk($tpl, $placeholders);\\r\\n}\\r\\n\\r\\n\\/\\/ We add the max delimiter to the crumbs output, if the max limit was reached\\r\\nif($crumbsCount == $maxCrumbs)\\r\\n{\\r\\n\\t\\/\\/ If is LTR direction, we push the max delimiter at the beginning of the crumbs\\r\\n\\tif($direction == \'ltr\')\\r\\n\\t{\\r\\n\\t\\t$output = $modx->getChunk($maxCrumbTpl).$output;\\r\\n\\t}\\r\\n\\t\\/\\/ Else we push it at the end\\r\\n\\telse\\r\\n\\t{\\r\\n\\t\\t$output .= $modx->getChunk($maxCrumbTpl);\\r\\n\\t}\\r\\n}\\r\\n\\r\\n\\/\\/ We build the breadcrumb output\\r\\n$output = $modx->getChunk($containerTpl, array(\\r\\n\\t\'crumbs\' => $output,\\r\\n));\\r\\n\\r\\nreturn $output;"}',
        'guid' => '5313030a8322cbf052db98152c708dfb',
        'native_key' => 1,
        'signature' => '74341086be8c973c619d1c1f48472a7f',
      ),
    ),
  ),
  'related_object_attributes' => 
  array (
    'Snippets' => 
    array (
      'preserve_keys' => false,
      'update_object' => true,
      'unique_key' => 'name',
    ),
    'Chunks' => 
    array (
      'preserve_keys' => false,
      'update_object' => true,
      'unique_key' => 'name',
    ),
  ),
  'namespace' => 'breadcrumb',
  'resolve' => 
  array (
    0 => 
    array (
      'type' => 'file',
      'body' => '{"source":"breadcrumb-1.1.0-pl\\/modCategory\\/428383d2ebad6ec2e969f407863d85e4\\/0\\/","target":"return MODX_CORE_PATH . \'components\\/\';","name":"breadcrumb"}',
    ),
  ),
  'validate' => NULL,
  'vehicle_package' => 'transport',
  'vehicle_class' => 'xPDOObjectVehicle',
  'guid' => 'ff25f6b455bc0ee6dc2bd1c67d3309c7',
  'package' => 'modx',
  'class' => 'modCategory',
  'signature' => '428383d2ebad6ec2e969f407863d85e4',
  'native_key' => 1,
  'object' => '{"id":1,"parent":0,"category":"BreadCrumb"}',
);